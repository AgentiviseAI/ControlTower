# Debug Dockerfile for ControlTower with debugpy support
FROM python:3.11-slim

# Set environment variables for debugging
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Application environment variables
ENV ENVIRONMENT=development
ENV DATABASE_TYPE=postgresql
ENV DATABASE_URL=""
ENV SECRET_KEY=changeme-dev
ENV JWT_SECRET_KEY=your-jwt-secret-key-change-in-production
ENV JWT_AUDIENCE=dev-audience
ENV CORS_ORIGINS=http://localhost:3000,http://localhost:5173,http://localhost:8001
ENV LOG_LEVEL=DEBUG
ENV SQLALCHEMY_LOG_LEVEL=WARNING

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libffi-dev \
    libssl-dev \
    libpq-dev \
    postgresql-client \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set work directory
WORKDIR /app

# Upgrade pip and install build tools
RUN pip install --no-cache-dir --upgrade pip setuptools wheel

# Copy requirements and install dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Install debugpy for remote debugging
RUN pip install --no-cache-dir debugpy

# Copy application code
COPY . .

# Create directory for database if needed
RUN mkdir -p /app/data

# Expose ports - 8000 for the app and 5678 for debugging
EXPOSE 8000 5678

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8000/health || exit 1

# Run with debugpy for remote debugging
# Initialize database first, then start with debugger
CMD ["sh", "-c", "python startup.py && python -m debugpy --listen 0.0.0.0:5678 --wait-for-client -m uvicorn main:app --host 0.0.0.0 --port 8000 --reload"]
